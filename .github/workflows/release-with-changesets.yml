name: Release

on:
  push:
    branches:
      - master
      - next-spec
      - next-major
      - next-major-spec
      - beta
      - alpha
      - next

jobs:
  test-nodejs:
    if: |
      startsWith( github.repository, 'asyncapi/' ) &&
      (startsWith( github.event.commits[0].message , 'fix:' ) ||
      startsWith( github.event.commits[0].message, 'fix!:' ) ||
      startsWith( github.event.commits[0].message, 'feat:' ) ||
      startsWith( github.event.commits[0].message, 'chore(release):' ) ||
      startsWith( github.event.commits[0].message, 'feat!:' ))
    name: Test NodeJS release on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, windows-latest]
    steps:
      - name: Set Git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
        shell: bash
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Check if package.json exists
        id: packagejson
        run: test -e ./package.json && echo "exists=true" >> $GITHUB_OUTPUT || echo "exists=false" >> $GITHUB_OUTPUT
        shell: bash
      - if: steps.packagejson.outputs.exists == 'true'
        name: Get Node.js version from package-lock
        uses: asyncapi/.github/.github/actions/get-node-version-from-package-lock@master
        id: lockversion
      - if: steps.packagejson.outputs.exists == 'true'
        name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ steps.lockversion.outputs.version }}"
      - if: steps.lockversion.outputs.version == '18' && matrix.os == 'windows-latest'
        name: Install npm CLI 8
        shell: bash
        run: npm install -g npm@8.19.4
      - if: steps.packagejson.outputs.exists == 'true'
        name: Install dependencies
        shell: bash
        run: npm ci
      - if: steps.packagejson.outputs.exists == 'true'
        name: Run tests
        run: npm test --if-present
      - if: failure()
        name: Report failure to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,action,workflow
          text: "Release workflow failed in testing job"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_CI_FAIL_NOTIFY }}

  release:
    needs: [test-nodejs]
    name: Publish to NPM, GitHub, or Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Set Git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Check if package.json exists
        id: packagejson
        run: test -e ./package.json && echo "exists=true" >> $GITHUB_OUTPUT || echo "exists=false" >> $GITHUB_OUTPUT
        shell: bash
      - if: steps.packagejson.outputs.exists == 'true'
        name: Get Node.js version from package-lock
        uses: asyncapi/.github/.github/actions/get-node-version-from-package-lock@master
        id: lockversion
      - if: steps.packagejson.outputs.exists == 'true'
        name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ steps.lockversion.outputs.version }}"
      - if: steps.packagejson.outputs.exists == 'true'
        name: Install dependencies
        shell: bash
        run: npm ci
      - if: steps.packagejson.outputs.exists == 'true'
        name: Install changeset CLI
        run: npm install @changesets/changelog-git@0.2.0

      - if: steps.packagejson.outputs.exists == 'true'
        name: Auto-generate changeset based on PR title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          CHANGES_DIR=".changeset"
          mkdir -p "$CHANGES_DIR"
          
          if [[ "$PR_TITLE" == feat* ]]; then
            VERSION="minor"
          elif [[ "$PR_TITLE" == fix* ]]; then
            VERSION="patch"
          elif [[ "$PR_TITLE" == feat!* || "$PR_TITLE" == fix!* ]]; then
            VERSION="major"
          else
            echo "PR title does not match feat, fix, or breaking change. Skipping changeset."
            exit 0
          fi

          FILE_NAME="$CHANGES_DIR/$(uuidgen).md"
          echo "---" > "$FILE_NAME"
          echo "\"cli\": $VERSION" >> "$FILE_NAME"
          echo "---" >> "$FILE_NAME"

          echo "Changeset created: $FILE_NAME"

      - if: steps.packagejson.outputs.exists == 'true'
        name: Publish to NPM, GitHub, and Docker Hub
        uses: changesets/action@v1
        id: release
        with:
          version: npm run bump:version
          commit: "chore(release): release and bump versions of packages"
          title: "chore(release): release and bump versions of packages"
          publish: npx -p @changesets/cli@2.27.7 changeset publish
          setupGitUser: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GIT_AUTHOR_NAME: asyncapi-bot
          GIT_AUTHOR_EMAIL: info@asyncapi.io
          GIT_COMMITTER_NAME: asyncapi-bot
          GIT_COMMITTER_EMAIL: info@asyncapi.io

      - if: failure()
        name: Report failure to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,action,workflow
          text: "Release workflow failed in release job"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_CI_FAIL_NOTIFY }}
